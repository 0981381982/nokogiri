#
# DO NOT MODIFY!!!!
# This file is automatically generated by zomg 1.0.1
# from IDL file "idl/dom.idl".
#

module W3C
module Org
module Dom
  # do nothing
  # do nothing
  # do nothing
  # do nothing
  # do nothing
  # do nothing
  # do nothing
  class DOMException < Exception
    attr_accessor(:code)
  end
  INDEX_SIZE_ERR = 1
  DOMSTRING_SIZE_ERR = 2
  HIERARCHY_REQUEST_ERR = 3
  WRONG_DOCUMENT_ERR = 4
  INVALID_CHARACTER_ERR = 5
  NO_DATA_ALLOWED_ERR = 6
  NO_MODIFICATION_ALLOWED_ERR = 7
  NOT_FOUND_ERR = 8
  NOT_SUPPORTED_ERR = 9
  INUSE_ATTRIBUTE_ERR = 10
  INVALID_STATE_ERR = 11
  SYNTAX_ERR = 12
  INVALID_MODIFICATION_ERR = 13
  NAMESPACE_ERR = 14
  INVALID_ACCESS_ERR = 15
  module DOMImplementation
    def hasFeature(feature, version)
      raise(NotImplementedError.new)
    end
    def createDocumentType(qualifiedName, publicId, systemId)
      raise(NotImplementedError.new)
    end
    def createDocument(namespaceURI, qualifiedName, doctype)
      raise(NotImplementedError.new)
    end
  end
  module Node
    ELEMENT_NODE = 1
    ATTRIBUTE_NODE = 2
    TEXT_NODE = 3
    CDATA_SECTION_NODE = 4
    ENTITY_REFERENCE_NODE = 5
    ENTITY_NODE = 6
    PROCESSING_INSTRUCTION_NODE = 7
    COMMENT_NODE = 8
    DOCUMENT_NODE = 9
    DOCUMENT_TYPE_NODE = 10
    DOCUMENT_FRAGMENT_NODE = 11
    NOTATION_NODE = 12
    attr_reader(:nodeName)
    attr_accessor(:nodeValue)
    attr_reader(:nodeType)
    attr_reader(:parentNode)
    attr_reader(:childNodes)
    attr_reader(:firstChild)
    attr_reader(:lastChild)
    attr_reader(:previousSibling)
    attr_reader(:nextSibling)
    attr_reader(:attributes)
    attr_reader(:ownerDocument)
    def insertBefore(newChild, refChild)
      raise(NotImplementedError.new)
    end
    def replaceChild(newChild, oldChild)
      raise(NotImplementedError.new)
    end
    def removeChild(oldChild)
      raise(NotImplementedError.new)
    end
    def appendChild(newChild)
      raise(NotImplementedError.new)
    end
    def hasChildNodes
      raise(NotImplementedError.new)
    end
    def cloneNode(deep)
      raise(NotImplementedError.new)
    end
    def normalize
      raise(NotImplementedError.new)
    end
    def isSupported(feature, version)
      raise(NotImplementedError.new)
    end
    attr_reader(:namespaceURI)
    attr_accessor(:prefix)
    attr_reader(:localName)
    def hasAttributes
      raise(NotImplementedError.new)
    end
  end
  module NodeList
    def item(index)
      raise(NotImplementedError.new)
    end
    attr_reader(:length)
  end
  module NamedNodeMap
    def getNamedItem(name)
      raise(NotImplementedError.new)
    end
    def setNamedItem(arg)
      raise(NotImplementedError.new)
    end
    def removeNamedItem(name)
      raise(NotImplementedError.new)
    end
    def item(index)
      raise(NotImplementedError.new)
    end
    attr_reader(:length)
    def getNamedItemNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
    def setNamedItemNS(arg)
      raise(NotImplementedError.new)
    end
    def removeNamedItemNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
  end
  module CharacterData
    include(Node)
    attr_accessor(:data)
    attr_reader(:length)
    def substringData(offset, count)
      raise(NotImplementedError.new)
    end
    def appendData(arg)
      raise(NotImplementedError.new)
    end
    def insertData(offset, arg)
      raise(NotImplementedError.new)
    end
    def deleteData(offset, count)
      raise(NotImplementedError.new)
    end
    def replaceData(offset, count, arg)
      raise(NotImplementedError.new)
    end
  end
  module Attr
    include(Node)
    attr_reader(:name)
    attr_reader(:specified)
    attr_accessor(:value)
    attr_reader(:ownerElement)
  end
  module Element
    include(Node)
    attr_reader(:tagName)
    def getAttribute(name)
      raise(NotImplementedError.new)
    end
    def setAttribute(name, value)
      raise(NotImplementedError.new)
    end
    def removeAttribute(name)
      raise(NotImplementedError.new)
    end
    def getAttributeNode(name)
      raise(NotImplementedError.new)
    end
    def setAttributeNode(newAttr)
      raise(NotImplementedError.new)
    end
    def removeAttributeNode(oldAttr)
      raise(NotImplementedError.new)
    end
    def getElementsByTagName(name)
      raise(NotImplementedError.new)
    end
    def getAttributeNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
    def setAttributeNS(namespaceURI, qualifiedName, value)
      raise(NotImplementedError.new)
    end
    def removeAttributeNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
    def getAttributeNodeNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
    def setAttributeNodeNS(newAttr)
      raise(NotImplementedError.new)
    end
    def getElementsByTagNameNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
    def hasAttribute(name)
      raise(NotImplementedError.new)
    end
    def hasAttributeNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
  end
  module Text
    include(CharacterData)
    def splitText(offset)
      raise(NotImplementedError.new)
    end
  end
  module Comment
    include(CharacterData)
  end
  module CDATASection
    include(Text)
  end
  module DocumentType
    include(Node)
    attr_reader(:name)
    attr_reader(:entities)
    attr_reader(:notations)
    attr_reader(:publicId)
    attr_reader(:systemId)
    attr_reader(:internalSubset)
  end
  module Notation
    include(Node)
    attr_reader(:publicId)
    attr_reader(:systemId)
  end
  module Entity
    include(Node)
    attr_reader(:publicId)
    attr_reader(:systemId)
    attr_reader(:notationName)
  end
  module EntityReference
    include(Node)
  end
  module ProcessingInstruction
    include(Node)
    attr_reader(:target)
    attr_accessor(:data)
  end
  module DocumentFragment
    include(Node)
  end
  module Document
    include(Node)
    attr_reader(:doctype)
    attr_reader(:implementation)
    attr_reader(:documentElement)
    def createElement(tagName)
      raise(NotImplementedError.new)
    end
    def createDocumentFragment
      raise(NotImplementedError.new)
    end
    def createTextNode(data)
      raise(NotImplementedError.new)
    end
    def createComment(data)
      raise(NotImplementedError.new)
    end
    def createCDATASection(data)
      raise(NotImplementedError.new)
    end
    def createProcessingInstruction(target, data)
      raise(NotImplementedError.new)
    end
    def createAttribute(name)
      raise(NotImplementedError.new)
    end
    def createEntityReference(name)
      raise(NotImplementedError.new)
    end
    def getElementsByTagName(tagname)
      raise(NotImplementedError.new)
    end
    def importNode(importedNode, deep)
      raise(NotImplementedError.new)
    end
    def createElementNS(namespaceURI, qualifiedName)
      raise(NotImplementedError.new)
    end
    def createAttributeNS(namespaceURI, qualifiedName)
      raise(NotImplementedError.new)
    end
    def getElementsByTagNameNS(namespaceURI, localName)
      raise(NotImplementedError.new)
    end
    def getElementById(elementId)
      raise(NotImplementedError.new)
    end
  end
end

end
end